document.querySelector('mutation-test-report-app').report = {"files":{"C:\\Users\\redwa\\OneDrive\\Bureau\\tp-jest-master\\src\\interval.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":6,"line":5},"start":{"column":29,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"1","location":{"end":{"column":6,"line":10},"start":{"column":2,"line":8}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"4","location":{"end":{"column":38,"line":9},"start":{"column":16,"line":9}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start - \",\"","status":"Survived"},{"id":"5","location":{"end":{"column":32,"line":9},"start":{"column":16,"line":9}},"mutatorName":"BinaryExpression","replacement":"\"[\" - this.start","status":"Survived"},{"id":"2","location":{"end":{"column":55,"line":9},"start":{"column":16,"line":9}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" + this.end - \"]\"","status":"Survived"},{"id":"3","location":{"end":{"column":49,"line":9},"start":{"column":16,"line":9}},"mutatorName":"BinaryExpression","replacement":"\"[\" + this.start + \",\" - this.end","status":"Survived"},{"id":"7","location":{"end":{"column":38,"line":9},"start":{"column":35,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"6","location":{"end":{"column":19,"line":9},"start":{"column":16,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"8","location":{"end":{"column":55,"line":9},"start":{"column":52,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":6,"line":28},"start":{"column":24,"line":26}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"11","location":{"end":{"column":70,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"10","location":{"end":{"column":70,"line":27},"start":{"column":16,"line":27}},"mutatorName":"BinaryExpression","replacement":"this.end > interval.start || this.start < interval.end","status":"Killed"},{"id":"13","location":{"end":{"column":41,"line":27},"start":{"column":16,"line":27}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.start","status":"Survived"},{"id":"12","location":{"end":{"column":70,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"14","location":{"end":{"column":41,"line":27},"start":{"column":16,"line":27}},"mutatorName":"BinaryExpression","replacement":"this.end <= interval.start","status":"Killed"},{"id":"15","location":{"end":{"column":41,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"16","location":{"end":{"column":41,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"17","location":{"end":{"column":70,"line":27},"start":{"column":45,"line":27}},"mutatorName":"BinaryExpression","replacement":"this.start <= interval.end","status":"Survived"},{"id":"18","location":{"end":{"column":70,"line":27},"start":{"column":45,"line":27}},"mutatorName":"BinaryExpression","replacement":"this.start >= interval.end","status":"Killed"},{"id":"19","location":{"end":{"column":70,"line":27},"start":{"column":45,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"20","location":{"end":{"column":70,"line":27},"start":{"column":45,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"21","location":{"end":{"column":6,"line":49},"start":{"column":5,"line":47}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"22","location":{"end":{"column":72,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end >= interval.end || this.start <= interval.start","status":"Killed"},{"id":"23","location":{"end":{"column":72,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"24","location":{"end":{"column":72,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"25","location":{"end":{"column":40,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end > interval.end","status":"Survived"},{"id":"26","location":{"end":{"column":40,"line":48},"start":{"column":16,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.end < interval.end","status":"Killed"},{"id":"27","location":{"end":{"column":40,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"28","location":{"end":{"column":40,"line":48},"start":{"column":16,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"29","location":{"end":{"column":72,"line":48},"start":{"column":44,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.start < interval.start","status":"Killed"},{"id":"31","location":{"end":{"column":72,"line":48},"start":{"column":44,"line":48}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"30","location":{"end":{"column":72,"line":48},"start":{"column":44,"line":48}},"mutatorName":"BinaryExpression","replacement":"this.start > interval.start","status":"Killed"},{"id":"32","location":{"end":{"column":72,"line":48},"start":{"column":44,"line":48}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"33","location":{"end":{"column":6,"line":70},"start":{"column":5,"line":68}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":85,"line":69},"start":{"column":16,"line":69}},"mutatorName":"ArrayLiteral","replacement":"[]","status":"Killed"}],"source":"class Interval {\r\n    constructor(start, end) {\r\n        this.start = start;\r\n        this.end = end\r\n    }\r\n\r\n    toString() \r\n\t{\r\n        return \"[\" + this.start + \",\" + this.end + \"]\";\r\n    }\r\n\t\r\n    /**\r\n     * Exemple 1 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓        \r\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.overlaps(interval2) => true\r\n     *\r\n     * Exemple 2 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                                       ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.overlaps(interval2) => false\r\n     *\r\n     * @param {Interval} interval\r\n     * @returns {boolean}\r\n     */\r\n    overlaps(interval) {\r\n        return this.end > interval.start && this.start < interval.end;\r\n    }\r\n\r\n    /**\r\n     * Retourne true si cet interval contient le paramètre interval\r\n     *\r\n     * Exemple 1 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                  ▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.includes(interval2) => true\r\n     *\r\n     * Exemple 2 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                              ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.includes(interval2) => false\r\n     *\r\n     * @param {Interval} interval\r\n     * @returns {boolean}\r\n     */\r\n    includes(interval)\r\n    {\r\n        return this.end >= interval.end && this.start <= interval.start;\r\n    };\r\n\r\n    /**\r\n     * Retourne l'union de deux intervals\r\n     *\r\n     * Exemple 1 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\r\n     *\r\n     * Exemple 2 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.union(interval2) =>        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\r\n     *\r\n     * @param {Interval} interval\r\n     * @returns {Interval[]}\r\n     */\r\n    union(interval)\r\n    {\r\n        return [Math.min(this.start,interval.start),Math.max(this.end,interval.end)];\r\n    };\r\n\r\n    /**\r\n     * Retourne l'intersection de deux intervals\r\n     *\r\n     * Exemple 1 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.intersection(interval2) =>                     ▒▒▒▒▒\r\n     *\r\n     * Exemple 2 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.intersection(interval2) => <tableau vide>\r\n     *\r\n     * @param {Interval} interval\r\n     * @returns {Interval|null}\r\n     */\r\n    intersection(interval) {\r\n\r\n    };\r\n\r\n    /**\r\n     * Retourne l'exclusion de deux intervals\r\n     *\r\n     * Exemple 1 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                              ▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒     ▒▒▒▒▒▒▒▒\r\n     *\r\n     * Exemple 2 :\r\n     *      interval1 =                          ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval2 =                                                      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\r\n     *      interval1.exclusion(interval2) =>    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒\r\n     *\r\n     * @param {Interval} interval\r\n     * @returns {Interval[]}\r\n     */\r\n    exclusion(interval) {\r\n\r\n    };\r\n}\r\n\r\nmodule.exports = Interval;\r\n"},"C:\\Users\\redwa\\OneDrive\\Bureau\\tp-jest-master\\src\\math.js":{"language":"javascript","mutants":[{"id":"36","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"35","location":{"end":{"column":2,"line":16},"start":{"column":25,"line":2}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"37","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"39","location":{"end":{"column":6,"line":5},"start":{"column":18,"line":3}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"38","location":{"end":{"column":16,"line":3},"start":{"column":9,"line":3}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"40","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"41","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"43","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n < 3000","status":"Killed"},{"id":"42","location":{"end":{"column":18,"line":7},"start":{"column":9,"line":7}},"mutatorName":"BinaryExpression","replacement":"n > 3000","status":"Killed"},{"id":"44","location":{"end":{"column":6,"line":9},"start":{"column":20,"line":7}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"45","location":{"end":{"column":28,"line":8},"start":{"column":15,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"46","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"47","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"48","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"49","location":{"end":{"column":14,"line":11},"start":{"column":9,"line":11}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"51","location":{"end":{"column":30,"line":12},"start":{"column":15,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"50","location":{"end":{"column":6,"line":13},"start":{"column":16,"line":11}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"52","location":{"end":{"column":37,"line":15},"start":{"column":12,"line":15}},"mutatorName":"BinaryExpression","replacement":"n / Util.factorial(n - 1)","status":"Killed"},{"id":"53","location":{"end":{"column":36,"line":15},"start":{"column":31,"line":15}},"mutatorName":"BinaryExpression","replacement":"n + 1","status":"Killed"},{"id":"55","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"56","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"54","location":{"end":{"column":2,"line":37},"start":{"column":29,"line":26}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"57","location":{"end":{"column":27,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n === 1 && n === 0","status":"Killed"},{"id":"60","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"59","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"58","location":{"end":{"column":16,"line":27},"start":{"column":9,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 1","status":"Killed"},{"id":"61","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"BinaryExpression","replacement":"n !== 0","status":"Killed"},{"id":"62","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"64","location":{"end":{"column":6,"line":29},"start":{"column":29,"line":27}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"63","location":{"end":{"column":27,"line":27},"start":{"column":20,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"65","location":{"end":{"column":21,"line":28},"start":{"column":16,"line":28}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"66","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"67","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"68","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Survived"},{"id":"69","location":{"end":{"column":14,"line":30},"start":{"column":9,"line":30}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"70","location":{"end":{"column":6,"line":32},"start":{"column":16,"line":30}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"72","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"ForStatement","replacement":"false","status":"Killed"},{"id":"71","location":{"end":{"column":50,"line":31},"start":{"column":15,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"73","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i <= n","status":"Killed"},{"id":"75","location":{"end":{"column":31,"line":33},"start":{"column":28,"line":33}},"mutatorName":"PostfixUnaryExpression","replacement":"i--","status":"Killed"},{"id":"76","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"74","location":{"end":{"column":26,"line":33},"start":{"column":21,"line":33}},"mutatorName":"BinaryExpression","replacement":"i >= n","status":"Killed"},{"id":"77","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"79","location":{"end":{"column":18,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n * i","status":"Killed"},{"id":"78","location":{"end":{"column":24,"line":34},"start":{"column":13,"line":34}},"mutatorName":"BinaryExpression","replacement":"n % i !== 0","status":"Killed"},{"id":"80","location":{"end":{"column":38,"line":34},"start":{"column":33,"line":34}},"mutatorName":"BooleanSubstitution","replacement":"true","status":"Killed"},{"id":"81","location":{"end":{"column":16,"line":35},"start":{"column":12,"line":35}},"mutatorName":"BooleanSubstitution","replacement":"false","status":"Killed"},{"id":"83","location":{"end":{"column":23,"line":51},"start":{"column":8,"line":51}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"82","location":{"end":{"column":2,"line":67},"start":{"column":1,"line":50}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"84","location":{"end":{"column":23,"line":51},"start":{"column":8,"line":51}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"85","location":{"end":{"column":6,"line":58},"start":{"column":5,"line":52}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"86","location":{"end":{"column":15,"line":53},"start":{"column":12,"line":53}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"88","location":{"end":{"column":15,"line":53},"start":{"column":12,"line":53}},"mutatorName":"BinaryExpression","replacement":"n <= 2","status":"Killed"},{"id":"87","location":{"end":{"column":15,"line":53},"start":{"column":12,"line":53}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"89","location":{"end":{"column":15,"line":53},"start":{"column":12,"line":53}},"mutatorName":"BinaryExpression","replacement":"n >= 2","status":"Killed"},{"id":"91","location":{"end":{"column":36,"line":57},"start":{"column":16,"line":57}},"mutatorName":"BinaryExpression","replacement":"n - Util.sumPrime(n - 1)","status":"Killed"},{"id":"90","location":{"end":{"column":10,"line":56},"start":{"column":9,"line":54}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"92","location":{"end":{"column":35,"line":57},"start":{"column":32,"line":57}},"mutatorName":"BinaryExpression","replacement":"n + 1","status":"Killed"},{"id":"93","location":{"end":{"column":6,"line":66},"start":{"column":5,"line":60}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"94","location":{"end":{"column":15,"line":61},"start":{"column":12,"line":61}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"95","location":{"end":{"column":15,"line":61},"start":{"column":12,"line":61}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"96","location":{"end":{"column":15,"line":61},"start":{"column":12,"line":61}},"mutatorName":"BinaryExpression","replacement":"n <= 2","status":"Survived"},{"id":"97","location":{"end":{"column":15,"line":61},"start":{"column":12,"line":61}},"mutatorName":"BinaryExpression","replacement":"n >= 2","status":"Killed"},{"id":"98","location":{"end":{"column":10,"line":64},"start":{"column":9,"line":62}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"99","location":{"end":{"column":32,"line":65},"start":{"column":29,"line":65}},"mutatorName":"BinaryExpression","replacement":"n + 1","status":"Killed"},{"id":"100","location":{"end":{"column":2,"line":102},"start":{"column":1,"line":82}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"101","location":{"end":{"column":14,"line":84},"start":{"column":11,"line":84}},"mutatorName":"WhileStatement","replacement":"false","status":"Killed"},{"id":"102","location":{"end":{"column":14,"line":84},"start":{"column":11,"line":84}},"mutatorName":"BinaryExpression","replacement":"n >= 0","status":"Killed"},{"id":"103","location":{"end":{"column":14,"line":84},"start":{"column":11,"line":84}},"mutatorName":"BinaryExpression","replacement":"n <= 0","status":"Killed"},{"id":"105","location":{"end":{"column":36,"line":86},"start":{"column":12,"line":86}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"106","location":{"end":{"column":36,"line":86},"start":{"column":12,"line":86}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"107","location":{"end":{"column":36,"line":86},"start":{"column":12,"line":86}},"mutatorName":"BinaryExpression","replacement":"n % 3 == 0 || n % 5 == 0","status":"Killed"},{"id":"108","location":{"end":{"column":22,"line":86},"start":{"column":12,"line":86}},"mutatorName":"BinaryExpression","replacement":"n % 3 != 0","status":"Killed"},{"id":"109","location":{"end":{"column":22,"line":86},"start":{"column":12,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"110","location":{"end":{"column":22,"line":86},"start":{"column":12,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"111","location":{"end":{"column":18,"line":86},"start":{"column":13,"line":86}},"mutatorName":"BinaryExpression","replacement":"n * 3","status":"Survived"},{"id":"112","location":{"end":{"column":36,"line":86},"start":{"column":26,"line":86}},"mutatorName":"BinaryExpression","replacement":"n % 5 != 0","status":"Killed"},{"id":"113","location":{"end":{"column":36,"line":86},"start":{"column":26,"line":86}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"114","location":{"end":{"column":36,"line":86},"start":{"column":26,"line":86}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"115","location":{"end":{"column":32,"line":86},"start":{"column":27,"line":86}},"mutatorName":"BinaryExpression","replacement":"n * 5","status":"Survived"},{"id":"116","location":{"end":{"column":5,"line":89},"start":{"column":4,"line":87}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"117","location":{"end":{"column":30,"line":88},"start":{"column":20,"line":88}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"118","location":{"end":{"column":21,"line":90},"start":{"column":11,"line":90}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"119","location":{"end":{"column":21,"line":90},"start":{"column":11,"line":90}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"120","location":{"end":{"column":21,"line":90},"start":{"column":11,"line":90}},"mutatorName":"BinaryExpression","replacement":"n % 3 != 0","status":"Killed"},{"id":"121","location":{"end":{"column":17,"line":90},"start":{"column":12,"line":90}},"mutatorName":"BinaryExpression","replacement":"n * 3","status":"Killed"},{"id":"122","location":{"end":{"column":5,"line":93},"start":{"column":4,"line":91}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"123","location":{"end":{"column":26,"line":92},"start":{"column":20,"line":92}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"124","location":{"end":{"column":21,"line":94},"start":{"column":11,"line":94}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"125","location":{"end":{"column":21,"line":94},"start":{"column":11,"line":94}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"126","location":{"end":{"column":21,"line":94},"start":{"column":11,"line":94}},"mutatorName":"BinaryExpression","replacement":"n % 5 != 0","status":"Killed"},{"id":"127","location":{"end":{"column":17,"line":94},"start":{"column":12,"line":94}},"mutatorName":"BinaryExpression","replacement":"n * 5","status":"Killed"},{"id":"128","location":{"end":{"column":5,"line":97},"start":{"column":4,"line":95}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"129","location":{"end":{"column":26,"line":96},"start":{"column":20,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"131","location":{"end":{"column":2,"line":132},"start":{"column":1,"line":114}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"132","location":{"end":{"column":37,"line":115},"start":{"column":35,"line":115}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"133","location":{"end":{"column":20,"line":116},"start":{"column":18,"line":116}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"134","location":{"end":{"column":8,"line":129},"start":{"column":5,"line":118}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"104","location":{"end":{"column":6,"line":100},"start":{"column":5,"line":85}},"mutatorName":"Block","replacement":"{}","status":"Timeout"},{"id":"135","location":{"end":{"column":20,"line":120},"start":{"column":12,"line":120}},"mutatorName":"IfStatement","replacement":"false","status":"Killed"},{"id":"136","location":{"end":{"column":20,"line":120},"start":{"column":12,"line":120}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"138","location":{"end":{"column":10,"line":123},"start":{"column":9,"line":121}},"mutatorName":"Block","replacement":"{}","status":"Killed"},{"id":"139","location":{"end":{"column":21,"line":124},"start":{"column":12,"line":124}},"mutatorName":"IfStatement","replacement":"false","status":"Survived"},{"id":"140","location":{"end":{"column":21,"line":124},"start":{"column":12,"line":124}},"mutatorName":"IfStatement","replacement":"true","status":"Killed"},{"id":"141","location":{"end":{"column":21,"line":124},"start":{"column":12,"line":124}},"mutatorName":"BinaryExpression","replacement":"char != 122","status":"Killed"},{"id":"142","location":{"end":{"column":10,"line":127},"start":{"column":9,"line":125}},"mutatorName":"Block","replacement":"{}","status":"Survived"},{"id":"143","location":{"end":{"column":47,"line":128},"start":{"column":41,"line":128}},"mutatorName":"BinaryExpression","replacement":"char - 1","status":"Killed"},{"id":"137","location":{"end":{"column":20,"line":120},"start":{"column":12,"line":120}},"mutatorName":"BinaryExpression","replacement":"char != 90","status":"Killed"},{"id":"130","location":{"end":{"column":6,"line":99},"start":{"column":3,"line":99}},"mutatorName":"PostfixUnaryExpression","replacement":"n++","status":"Timeout"}],"source":"let Util = {};\nUtil.factorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n\n    if (n >= 3000) {\n        throw 'n too large'\n    }\n\n    if (n < 0) {\n        throw 'n is negative'\n    }\n\n    return n * Util.factorial(n - 1);\n};\n\n/**\n * Détermine si n est un nombre premier.\n * Util.isPrime(5) => false\n * Util.isPrime(6) => true\n *\n * @param {number} n\n * @returns {boolean}\n */\nUtil.isPrime = function (n) {\n    if (n === 1 || n === 0) {\n        return false;\n    }\n    if (n < 0) {\n        throw 'Unable to compute prime for n < 0'\n    }\n    for (var i = 2; i < n; i++)\n        if (n % i === 0) return false;\n    return true;\n\n};\n\n\n/**\n * Additionne l'ensemble des nombres premiers de 2 à n\n *\n * Util.sumPrime(6) = 2 + 3 + 5 = 10\n * Util.sumPrime(8) = 2 + 3 + 5 + 7 = 17\n *\n * @param {number} n\n * @returns {number}\n */\nUtil.sumPrime = function(n)\n{\n    if(Util.isPrime(n))\n    {\n        if(n<2)\n        {\n          return 0;\n        } else\n        return n+Util.sumPrime(n-1);\n    }\n      else\n    {\n        if(n<2)\n        {\n            return 0;\n        } \n\t\telse return Util.sumPrime(n-1);\n    }\n};\n\n/**\n * Cette méthode doit retourner un tableau de 1 à n tel que:\n * - Pour les nombres multiples de 3, les remplacer par \"Fizz\"\n * - Pour les nombres multiples de 5, les remplacer par \"Buzz\"\n * - Pour les nombres multiples de 3 et 5, les remplacer par \"FizzBuzz\"\n *\n * Exp :\n * Util.fizzBuzz(15) => [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n *\n * @param {number} n\n * @returns {array}\n */\nUtil.fizzBuzz = function(n)\n{\n  var arrayFizz=Array();\n    while(n>0)\n    {\n        if((n % 3)==0 && (n % 5)==0)\n\t\t\t{\n\t\t\t\tarrayFizz.push(\"FizzBuzz\")\n\t\t\t}\n\t\telse if((n % 3)==0)\n\t\t\t{\n\t\t\t\tarrayFizz.push(\"Fizz\");\n\t\t\t}\n\t\telse if((n % 5)==0)\n\t\t\t{\n\t\t\t\tarrayFizz.push(\"Buzz\");\n\t\t\t}\n\t\telse arrayFizz.push(n);\n\t\tn--;\n    }\n    return arrayFizz;\n};\n\n/**\n * Chiffre une phrase selon la règle suivante : Les A deviennent des B, les B des C, etc.\n *\n * Exp :\n * Util.cipher(\"Test Unitaire\") => \"Uftu Tojubjsf\"\n *\n * @param phrase\n * @returns {string}\n */\nUtil.cipher = function (phrase)\n{\n    var maPhraseChar=phrase.split('');\n    var resultat=\"\";\n    maPhraseChar.forEach(function(c)\n    {\n      var char=c.charCodeAt(0);\n        if(char==90)\n        {\n            char=64;\n        }\n        if(char==122)\n        {\n          char=96;\n        }\n          resultat+=String.fromCharCode(char+1);\n      }\n    );\n    return resultat;\n};\n\nmodule.exports = Util;\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};